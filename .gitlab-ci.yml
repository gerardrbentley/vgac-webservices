stages:
  - build_proxy
  - build_api
  - build_manager
  - build_expert
  - build_single
  - staging
  - deploy

variables:
  DBAPI_IMAGE_TAG: $DOCKER_HUB:dbapi-$CI_COMMIT_REF_SLUG
  EXPERT_IMAGE_TAG: $DOCKER_HUB:expert-$CI_COMMIT_REF_SLUG
  SINGLE_TILE_IMAGE_TAG: $DOCKER_HUB:single-tile-$CI_COMMIT_REF_SLUG
  # Used to have staging and production of proxy and manager
  REVERSE_PROXY_IMAGE_TAG: $DOCKER_HUB:reverse-proxy-production
  DB_MANAGER_IMAGE_TAG: $DOCKER_HUB:db-manager-production
  
reverse_proxy:
  rules:
    - if: '$CI_COMMIT_BRANCH == "production"'
      changes:
      - nginx_config/**/*
      - Dockerfile-faim-nginx
      - static/**/*
      when: always
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - pwd
#    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - echo "{\"auths\":{\"https://index.docker.io/v1/\":{\"auth\":\"$GERARD_DOCKER_AUTH\"}}}" > /kaniko/.docker/config.json
    # - cat $CA_PUB_CERT_CHAIN >> /kaniko/ssl/certs/ca-certificates.crt
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile-faim-nginx --destination $REVERSE_PROXY_IMAGE_TAG
  stage: build_proxy

vgac_dbapi:
  rules:
    - if: '$CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "production"'
      changes:
      - dbapi/**/*
      when: always
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - cd dbapi
#    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - echo "{\"auths\":{\"https://index.docker.io/v1/\":{\"auth\":\"$GERARD_DOCKER_AUTH\"}}}" > /kaniko/.docker/config.json
    # - cat $CA_PUB_CERT_CHAIN >> /kaniko/ssl/certs/ca-certificates.crt
    - /kaniko/executor --context $CI_PROJECT_DIR/dbapi --dockerfile $CI_PROJECT_DIR/dbapi/Dockerfile-dbapi --destination $DBAPI_IMAGE_TAG
  stage: build_api

db_manager:
  rules:
    - if: '$CI_COMMIT_BRANCH == "production"'
      changes:
      - db_manager/**/*
      when: always
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - cd db_manager
#    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - echo "{\"auths\":{\"https://index.docker.io/v1/\":{\"auth\":\"$GERARD_DOCKER_AUTH\"}}}" > /kaniko/.docker/config.json
    # - cat $CA_PUB_CERT_CHAIN >> /kaniko/ssl/certs/ca-certificates.crt
    - /kaniko/executor --context $CI_PROJECT_DIR/db_manager --dockerfile $CI_PROJECT_DIR/db_manager/Dockerfile-db-manager --destination $DB_MANAGER_IMAGE_TAG
  stage: build_manager

expert:
  rules:
    - if: '$CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "production"'
      changes:
      - expert/**/*
      when: always
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - cd expert
#    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - echo "{\"auths\":{\"https://index.docker.io/v1/\":{\"auth\":\"$GERARD_DOCKER_AUTH\"}}}" > /kaniko/.docker/config.json
    # - cat $CA_PUB_CERT_CHAIN >> /kaniko/ssl/certs/ca-certificates.crt
    - /kaniko/executor --context $CI_PROJECT_DIR/expert --dockerfile $CI_PROJECT_DIR/expert/Dockerfile-expert --destination $EXPERT_IMAGE_TAG
  stage: build_expert
 
single:
  rules:
    - if: '$CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "production"'
      changes:
      - single_tile_tagging/**/*
      when: always
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - cd single_tile_tagging
#    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - echo "{\"auths\":{\"https://index.docker.io/v1/\":{\"auth\":\"$GERARD_DOCKER_AUTH\"}}}" > /kaniko/.docker/config.json
    # - cat $CA_PUB_CERT_CHAIN >> /kaniko/ssl/certs/ca-certificates.crt
    - /kaniko/executor --context $CI_PROJECT_DIR/single_tile_tagging --dockerfile $CI_PROJECT_DIR/single_tile_tagging/Dockerfile-single-tile --destination $SINGLE_TILE_IMAGE_TAG
  stage: build_single

deploy-staging:
  stage: staging
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: always
  image: bash
  environment:
    name: staging
    url: https://vgac.cs.pomona.edu/staging/
  script: |
    apk update; apk add openssh-client
    chmod 600 $PRIVATE_KEY
    scp -i $PRIVATE_KEY \
      -o UserKnownHostsFile=/dev/null \
      -o StrictHostKeyChecking=no  \
      docker-compose.staging.yml \
      faim@vgac.cs.pomona.edu:/webservices/docker-compose.staging.yml
    echo 'Docker-compose copied'
    scp -i $PRIVATE_KEY \
      -o UserKnownHostsFile=/dev/null \
      -o StrictHostKeyChecking=no  \
      -r \
      static/ \
      faim@vgac.cs.pomona.edu:$STAGING_DIR
    echo 'Staging static files copied to $STAGING_DIR'
    ssh faim@vgac.cs.pomona.edu \
      -o UserKnownHostsFile=/dev/null \
      -o StrictHostKeyChecking=no \
      -i $PRIVATE_KEY "
     cd /webservices
     echo 'Docker login'
     docker login -u gerardrbentley -p $GERARD_DOCKER_TOKEN || exit 1
     echo 'Pull images'
     DBAPI_IMAGE=$DBAPI_IMAGE_TAG \
     REVERSE_PROXY_IMAGE=$REVERSE_PROXY_IMAGE_TAG \
     EXPERT_IMAGE=$EXPERT_IMAGE_TAG \
     SINGLE_TILE_IMAGE=$SINGLE_TILE_IMAGE_TAG \
       docker-compose -f docker-compose.staging.yml pull
     echo 'Using docker-compose up'
     echo 'Deploying TARGET: $CI_ENVIRONMENT_SLUG'
     POSTGRES_USER=$POSTGRES_USER \
       POSTGRES_DB=$POSTGRES_DB \
       POSTGRES_PASSWORD=$POSTGRES_PASSWORD \
       POSTGRES_PORT=$POSTGRES_PORT \
       DBAPI_IMAGE=$DBAPI_IMAGE_TAG \
       REVERSE_PROXY_IMAGE=$REVERSE_PROXY_IMAGE_TAG \
       EXPERT_IMAGE=$EXPERT_IMAGE_TAG \
       SINGLE_TILE_IMAGE=$SINGLE_TILE_IMAGE_TAG \
       STAGING_DIR=$STAGING_DIR \
       TARGET=$CI_ENVIRONMENT_SLUG \
       CERTS_DIR=$CERTS_DIR \
       docker-compose -f docker-compose.staging.yml up -d
     echo 'Staging Up and Serving'"

deploy-prod:
  stage: deploy
  rules:
    - if: '$CI_COMMIT_BRANCH == "production"'
      when: manual
  environment:
    name: production
    url: https://vgac.cs.pomona.edu
  image: bash
  script: |
    apk update; apk add openssh-client
    chmod 600 $PRIVATE_KEY
    scp -i $PRIVATE_KEY \
      -o UserKnownHostsFile=/dev/null \
      -o StrictHostKeyChecking=no  \
      docker-compose.yml \
      faim@vgac.cs.pomona.edu:/webservices/docker-compose.yml
    echo 'Docker-compose copied'
    ssh faim@vgac.cs.pomona.edu \
      -o UserKnownHostsFile=/dev/null \
      -o StrictHostKeyChecking=no \
      -i $PRIVATE_KEY "
     cd /webservices
     echo 'Docker login'
     docker login -u gerardrbentley -p $GERARD_DOCKER_TOKEN || exit 1
     echo 'Pull images'
     DBAPI_IMAGE=$DBAPI_IMAGE_TAG \
     REVERSE_PROXY_IMAGE=$REVERSE_PROXY_IMAGE_TAG \
     DB_MANAGER_IMAGE=$DB_MANAGER_IMAGE_TAG \
     EXPERT_IMAGE=$EXPERT_IMAGE_TAG \
     SINGLE_TILE_IMAGE=$SINGLE_TILE_IMAGE_TAG \
       docker-compose pull
     echo 'Pull db manager (not in compose)'
     docker pull $DB_MANAGER_IMAGE_TAG
     echo 'Using docker-compose up'
     echo 'Deploying TARGET: $CI_ENVIRONMENT_SLUG'
     POSTGRES_USER=$POSTGRES_USER \
       POSTGRES_DB=$POSTGRES_DB \
       POSTGRES_PASSWORD=$POSTGRES_PASSWORD \
       POSTGRES_PORT=$POSTGRES_PORT \
       DBAPI_IMAGE=$DBAPI_IMAGE_TAG \
       REVERSE_PROXY_IMAGE=$REVERSE_PROXY_IMAGE_TAG \
       EXPERT_IMAGE=$EXPERT_IMAGE_TAG \
       SINGLE_TILE_IMAGE=$SINGLE_TILE_IMAGE_TAG \
       STAGING_DIR=$STAGING_DIR \
       TARGET=$CI_ENVIRONMENT_SLUG \
       CERTS_DIR=$CERTS_DIR \
       docker-compose up -d
     echo 'production serving'"
